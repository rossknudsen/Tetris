<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set instance variables.

// a variable indicating whether we are falling or not.
isFalling = true;

// the time since the last move.
timeSinceLastMove = 0;

// stop animation of the brick.
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls the downward falling movement of the bricks.

// if we are not falling or the game is paused we should exit now.
if (!isFalling || state != GameState.Running)
    exit;

// the time since the last move in seconds.
timeSinceLastMove += delta_time / 1000000;
    
while (secondsPerMove &lt;= timeSinceLastMove)
{
    if (scrCanTileFall(self))
    {
        y += brickSize;
    }
    else
    {
        isFalling = false;
        
        // find the correct brick sprite to display.
        var brickSprite = scrGetBrickSprite(self.sprite_index);
        
        // loop through each row of the object.
        var row;
        var column;
        for (row = y - 4 * brickSize; row &lt; y + 4 * brickSize; row += brickSize)
        {
            for (column = x - 4 * brickSize; column &lt; x + 4 * brickSize; column += brickSize)
            {
                var object = instance_position(column, row, self.object_index);
                if (object != noone)
                {
                    var brick = instance_create(column, row, objBrick);
                    brick.sprite_index = brickSprite;
                }
            }
        }
        
        // remove ourselves from the game.
        instance_destroy();
    }
    
    // reduce the timeSinceLastMove by the amount per move.
    timeSinceLastMove += -secondsPerMove;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy the object if it is outside the room.

// this is relevant for the start screen where we may make 'rain'
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
