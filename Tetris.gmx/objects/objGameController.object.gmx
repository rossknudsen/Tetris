<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialise gameplay variables.
secondsPerMove = 1.5;
playerLevel = 1;
linesTotal = 0;
score = 0;

// The location new bricks are spawned.
startingX = brickSize * 10;
startingY = brickSize * 1;

// the starting state of the game.
state = GameState.Running;

// the next brick
next = scrGetNextBrick();

draw_set_font(fntDigitalSmall);
inst1 = "PRESS LEFT/RIGHT TO MOVE";
inst1X = (room_width - string_width(inst1)) / 2;

inst2 = "UP/DOWN TO ROTATE SPACE TO DROP";
inst2X = (room_width - string_width(inst2)) / 2;

enum GameState
{
    Running,
    Ended,
    Paused
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Monitors the game and maintains game state.
switch (state)
{
    case GameState.Running:
        if (instance_number(objFallingParent) == 0)
        {
            // check if there are complete lines.
            scrHandleCompleteLines();
            
            // check if the player has increased in level.
            scrCheckPlayerLevel();
            
            // check for game end.
            if (scrHasGameEnded())
            {
                state = GameState.Ended;
                
                // play game end sound.
                audio_play_sound(sndDunDunDun, 10, false);
                
                scrHandleHighScore();
                room_goto(rmHighScore);
            }
            else
            {
                var tile = instance_create(startingX, startingY, objFallingParent);
                tile.sprite_index = next;
                next = scrGetNextBrick();
                
                // play blop for tile appearance.
                audio_play_sound(sndBlop, 10, false);
            }
        }
        break;
        
    case GameState.Ended:
        // TODO do game end stuff.
        break;
    
    case GameState.Paused:
    
        break;
}

// restart the level when user presses 'R' key
if (keyboard_check(ord("R")))
{
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update the GUI.

draw_set_alpha(1);
draw_set_colour(c_red);
draw_set_font(fntDigitalLarge);

// display the next brick.
draw_text(400, 40, "NEXT");
draw_sprite(next, 0, 
    700 - 0.5 * sprite_get_width(next), 
    75 - 0.5 * sprite_get_height(next));

// display the number of lines.
draw_text(400, 130, "LINES " + string_format(linesTotal, 4, 0));

// update the level.
draw_text(400, 200, "LEVEL " + string_format(playerLevel, 4, 0));

// update the score on screen.
draw_text(400, 270, "SCORE " + string_format(score, 4, 0));

// add instructions for the game.
draw_set_font(fntDigitalSmall);
draw_text(inst1X, 375, inst1);
draw_text(inst2X, 405, inst2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
